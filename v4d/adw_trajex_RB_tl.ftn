!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
***s/r adw_trajex_RB_tl - TLM of adw_trajex_RB  
*
#include "model_macros_f.h"
*
      subroutine adw_trajex_RB_tl ( F_xto,   F_yto,   F_xcto,  F_ycto,
     %                              F_zcto,  F_xctm,  F_yctm,  F_zctm,  F_u , F_v,
     %                              F_xto_m, F_yto_m, F_xcto_m,F_ycto_m,
     %                              F_zcto_m,F_xctm_m,F_yctm_m,F_zctm_m,F_um, F_vm,
     %                              F_dt,i0,in,j0,jn)
*
#include "impnone.cdk"
*
      real   F_xto (*), F_yto (*), F_xcto(*), F_ycto(*),
     %       F_zcto(*), F_xctm(*), F_yctm(*), F_zctm(*),F_u(*),F_v(*),F_dt
*
      real   F_xto_m (*), F_yto_m (*), F_xcto_m(*), F_ycto_m(*),
     %       F_zcto_m(*), F_xctm_m(*), F_yctm_m(*), F_zctm_m(*),F_um(*),F_vm(*)
      integer i0,in,j0,jn
*
*author M.Tanguay
*
*revision
* v3_35 - Tanguay M.  - initial MPI version
* v3_35 - Tanguay M.  - TL/AD Ritchie/Beaudoin estimation of positions
*
*object
*     see id section
*
*arguments
*______________________________________________________________________
*              |                                                 |     |
* NAME         | DESCRIPTION                                     | I/O |
*--------------|-------------------------------------------------|-----|
*              |                                                 |     |
* F_xto        | upstream x positions at origin                  |  o  |
* F_yto        | upstream y positions at origin                  |  o  |
* F_xcto       | upstream x cartesian positions at origin        |  o  |
* F_ycto       | upstream y cartesian positions at origin        |  o  |
* F_zcto       | upstream z cartesian positions at origin        |  o  |
* F_xctm       | upstream x cartesian positions at mid-traj.     |  i  |
* F_yctm       | upstream y cartesian positions at mid-traj.     |  i  |
* F_zctm       | upstream z cartesian positions at mid-traj.     |  i  |
* F_u          | real E-W wind components at upwind positions    |  i  |
* F_v          | real N-S wind components at upwind positions    |  i  |
* F_dt         | timestep lenght                                 |  i  |
*______________|_________________________________________________|_____|
*
*implicits
#include "glb_ld.cdk"
#include "adw.cdk"
#include "dcst.cdk"
#include "geomg.cdk"
************************************************************************
      integer i,j,k,n,ij,nij
*
      real*8 :: One_ov_Six_8,Seven_ov_Six_8,Two_ov_Three_8,term_ord3_8,rad2deg_8,CLXXX_8
      real*8 :: xto_8((in-i0+1)*(jn-j0+1))
      real*8 :: yto_8((in-i0+1)*(jn-j0+1))
      real*8 :: cos_yto_8
      real*8 :: sin_yto_8
      real*8 :: cos_xto_8
      real*8 :: sin_xto_8
*
      real*8 :: term_ord3_m_8
      real*8 :: xto_m_8((in-i0+1)*(jn-j0+1))
      real*8 :: yto_m_8((in-i0+1)*(jn-j0+1))
      real*8 :: cos_yto_m_8((in-i0+1)*(jn-j0+1))
      real*8 :: sin_yto_m_8((in-i0+1)*(jn-j0+1))
      real*8 :: cos_xto_m_8((in-i0+1)*(jn-j0+1))
      real*8 :: sin_xto_m_8((in-i0+1)*(jn-j0+1))
*
      real*8 prx_8, pry_8, prz_8, prdot2_8, r2pi_8, prdot2m_8, TWO_8
*
      real  minmax, minmax_m, nodiv0_m
*
      real*8 xasinm_8((in-i0+1)*(jn-j0+1)), yasinm_8((in-i0+1)*(jn-j0+1))
      real*8 xatanm_8((in-i0+1)*(jn-j0+1)), yatanm_8((in-i0+1)*(jn-j0+1)), zatanm_8((in-i0+1)*(jn-j0+1))
      real*8 sminm_8 ((in-i0+1)*(jn-j0+1)), rsminm_8((in-i0+1)*(jn-j0+1))
      real*8 xym_8   ((in-i0+1)*(jn-j0+1)), rxym_8  ((in-i0+1)*(jn-j0+1))
*
      parameter (TWO_8 = 2.0)
      parameter( CLXXX_8 = 180.0 )
*
      integer j_south,j_north,pole,p1,p2,j1,j2,loc 
      common/info_trajex_RB/j_south,j_north,p1,p2 
*
************************************************************************
      nij  = l_ni*l_nj
*
      r2pi_8 = TWO_8 * Dcst_pi_8
*
      One_ov_Six_8   = 1.0D0/6.0D0
      Seven_ov_Six_8 = 7.0D0/6.0D0
      Two_ov_Three_8 = 2.0D0/3.0D0

      rad2deg_8      = CLXXX_8/Dcst_pi_8
*
!$omp parallel private(n,ij,i,j,k,
!$omp&    prx_8,pry_8,prz_8,prdot2_8,prdot2m_8,
!$omp&    minmax, minmax_m, nodiv0_m,
!$omp&    sminm_8,rsminm_8,xasinm_8,yasinm_8,
!$omp&    xatanm_8,yatanm_8,zatanm_8,xym_8,rxym_8,
!$omp&    term_ord3_8,term_ord3_m_8,xto_8,yto_8,xto_m_8,yto_m_8,
!$omp&    cos_xto_8,sin_xto_8,cos_yto_8,sin_yto_8,
!$omp&    cos_xto_m_8,sin_xto_m_8,cos_yto_m_8,sin_yto_m_8,
!$omp&    pole,j1,j2,loc) shared(p1,p2,j_south,j_north)
*
!$omp do
      do k=1,l_nk

*        ---------------------------------------------------------
*        BETWEEN POLES
*        ---------------------------------------------------------
         loc = 0

         do j=j_south,j_north
         do i=i0,in
 
            n = (k-1)*nij+((j-1)*l_ni) + i

            loc = loc + 1

            term_ord3_m_8 = (F_um(n)*F_dt)**2 * Adw_tgy_8(j)**2 * One_ov_Six_8  +
     &                      (F_vm(n)*F_dt)**2 * (2.0D0 * Adw_scy_8(j)**2 - Seven_ov_Six_8)

            term_ord3_8 = 2.0D0 * F_um(n) * F_u(n) * (F_dt)**2 * Adw_tgy_8(j)**2 * One_ov_Six_8  +
     &                    2.0D0 * F_vm(n) * F_v(n) * (F_dt)**2 * (2.0D0 * Adw_scy_8(j)**2 - Seven_ov_Six_8)
*
            xto_m_8(loc)  = Adw_xa_8(i)
     &                      - (F_um(n)*F_dt) * 2.0D0 * Adw_scy_8(j) *
     &                      ( 1.0D0 - (F_vm(n)*F_dt) * Adw_tgy_8(j) + term_ord3_m_8 )
*
            xto_8(loc)  = 
     &                    - (F_u (n)*F_dt) * 2.0D0 * Adw_scy_8(j) *
     &                    ( 1.0D0 - (F_vm(n)*F_dt) * Adw_tgy_8(j) + term_ord3_m_8 )
     &                    - (F_um(n)*F_dt) * 2.0D0 * Adw_scy_8(j) *
     &                    (       - (F_v (n)*F_dt) * Adw_tgy_8(j) + term_ord3_8   )
*
            if (xto_m_8(loc) < 0.    ) xto_m_8(loc) = xto_m_8(loc) + r2pi_8

            if (xto_m_8(loc) > r2pi_8) xto_m_8(loc) = xto_m_8(loc) - r2pi_8

            F_xto_m(n)=xto_m_8(loc)
            F_xto  (n)=xto_8  (loc)  

            yto_m_8(loc)  = Adw_ya_8(j) - 2.0D0*F_vm(n)*F_dt
     &                      + (F_um(n)*F_dt)**2 * (F_vm(n)*F_dt) * (Adw_scy_8(j)**2 - Two_ov_Three_8)

            yto_8(loc)  = - 2.0D0*F_v(n)*F_dt
     &                    + 2.0D0* F_um(n) * F_u(n) * (F_dt)**2 * (F_vm(n)*F_dt) * (Adw_scy_8(j)**2 - Two_ov_Three_8)
     &                    +       (F_um(n)          *  F_dt)**2 * (F_v (n)*F_dt) * (Adw_scy_8(j)**2 - Two_ov_Three_8)
*
            F_yto_m(n)=yto_m_8(loc)
            F_yto  (n)=yto_8  (loc) 
*
         enddo
         enddo

         call vcos  (cos_xto_m_8,xto_m_8,(in-i0+1)*(j_north-j_south+1))
         call vcos  (cos_yto_m_8,yto_m_8,(in-i0+1)*(j_north-j_south+1))
         call vsin  (sin_xto_m_8,xto_m_8,(in-i0+1)*(j_north-j_south+1))
         call vsin  (sin_yto_m_8,yto_m_8,(in-i0+1)*(j_north-j_south+1))

         loc = 0

         do j=j_south,j_north
         do i=i0,in

            n   = (k-1)*nij+((j-1)*l_ni) + i

            loc = loc + 1

            cos_xto_8 = -sin_xto_m_8(loc)*xto_8(loc)
            cos_yto_8 = -sin_yto_m_8(loc)*yto_8(loc)
            sin_xto_8 =  cos_xto_m_8(loc)*xto_8(loc)
            sin_yto_8 =  cos_yto_m_8(loc)*yto_8(loc)

            F_xcto_m(n) = cos_xto_m_8(loc)*cos_yto_m_8(loc)
            F_ycto_m(n) = cos_yto_m_8(loc)*sin_xto_m_8(loc)
            F_zcto_m(n) = sin_yto_m_8(loc)
*
            F_xcto(n) = cos_xto_8*cos_yto_m_8(loc) + cos_xto_m_8(loc)*cos_yto_8
            F_ycto(n) = cos_yto_8*sin_xto_m_8(loc) + cos_yto_m_8(loc)*sin_xto_8
            F_zcto(n) = sin_yto_8

         enddo
         enddo

*        ---------------------------------------------------------
*        CLOSE TO POLES
*        ---------------------------------------------------------
         do pole = p1,p2  

            if (pole.eq.1) then
                j1 = j0 
                j2 = j_south -1 
            else
                j1 = j_north +1 
                j2 = jn 
            endif

            loc = 0

            do j=j1,j2
            do i=i0,in

               n  = (k-1)*nij+((j-1)*l_ni) + i
               ij = mod( n-1, nij ) + 1

               loc = loc + 1

               pry_8 = dble(Adw_cy2d_8(ij))
               prx_8 = dble(Adw_cx2d_8(ij)) * pry_8
               pry_8 = dble(Adw_sx2d_8(ij)) * pry_8
               prz_8 = dble(Adw_sy2d_8(ij))
*
*              TRAJECTORY
*              ----------
               prdot2m_8= 2.0 * ( prx_8 * dble(F_xctm_m(n)) +
     %                            pry_8 * dble(F_yctm_m(n)) +
     %                            prz_8 * dble(F_zctm_m(n)) )
*
               F_xcto_m(n) = prdot2m_8 * dble(F_xctm_m(n)) - prx_8
               F_ycto_m(n) = prdot2m_8 * dble(F_yctm_m(n)) - pry_8
               F_zcto_m(n) = prdot2m_8 * dble(F_zctm_m(n)) - prz_8
*
               xym_8(loc)   = F_xcto_m(n)*F_xcto_m(n) + F_ycto_m(n)*F_ycto_m(n)
*
               xatanm_8(loc)= F_xcto_m(n)
               yatanm_8(loc)= F_ycto_m(n)
               xasinm_8(loc)= max(-1.,min(1.,F_zcto_m(n)))
*
*              TLM
*              ---
               prdot2_8= 2.0 * ( prx_8 * dble(F_xctm(n)) +
     %                           pry_8 * dble(F_yctm(n)) +
     %                           prz_8 * dble(F_zctm(n)) )
*
               F_xcto(n) = prdot2m_8 * dble(F_xctm(n)) + prdot2_8 * dble(F_xctm_m(n))
               F_ycto(n) = prdot2m_8 * dble(F_yctm(n)) + prdot2_8 * dble(F_yctm_m(n))
               F_zcto(n) = prdot2m_8 * dble(F_zctm(n)) + prdot2_8 * dble(F_zctm_m(n))
*
*              NOTE: nodiv0_m is used to allow valid 1/smin_8
*              ----------------------------------------------
               minmax_m = F_zcto_m(n)
               nodiv0_m = minmax_m
               if (F_zcto_m(n).ge.1.) then
                   minmax_m = 1.
                   nodiv0_m = 0.
               elseif (F_zcto_m(n).le.-1.) then
                   minmax_m =-1.
                   nodiv0_m = 0.
               endif
*
               sminm_8(loc) = sqrt( 1.0-nodiv0_m*nodiv0_m )
*
            enddo
            enddo
*
            call vatan2(zatanm_8, yatanm_8, xatanm_8, (in-i0+1)*(j2-j1+1))
            call vasin (yasinm_8, xasinm_8,           (in-i0+1)*(j2-j1+1))
            call vrec  (rxym_8,   xym_8,              (in-i0+1)*(j2-j1+1))
            call vrec  (rsminm_8, sminm_8,            (in-i0+1)*(j2-j1+1))

            loc = 0

            do j=j1,j2
            do i=i0,in

               n = (k-1)*nij+((j-1)*l_ni) + i

               loc = loc + 1
 
               F_xto_m(n) = zatanm_8(loc)
               F_yto_m(n) = yasinm_8(loc)
*
               F_xto(n) = (F_ycto(n)*F_xcto_m(n) - F_ycto_m(n)*F_xcto(n)) * rxym_8(loc)
*
               if ( F_xto_m(n) .lt. 0.0 ) F_xto_m(n) = F_xto_m(n) + r2pi_8
*
*              The following min statement is expanded as two IF blocks:
*              minmax_m = max(-1.,min(1.,F_zcto_m(n)))
*
               minmax   = F_zcto(n)
               if (F_zcto_m(n).ge.1.) then
                   minmax   = 0.
                   F_yto(n) = 0.
               elseif (F_zcto_m(n).le.-1.) then
                    minmax  = 0.
                   F_yto(n) = 0.
               else
                   F_yto(n) = minmax * rsminm_8(loc)
               endif

            enddo
            enddo

         enddo

      enddo
!$omp enddo
!$omp end parallel
*
      return
      end
