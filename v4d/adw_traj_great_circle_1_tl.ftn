!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
***s/r adw_traj_great_circle_1_tl - TLM of adw_traj_great_circle_1 
*
#include "model_macros_f.h"
*
      subroutine adw_traj_great_circle_1_tl (F_lon_d  ,F_lat_d  ,F_x_d  ,F_y_d  ,F_z_d  ,F_u_a  ,F_v_a  , 
     %                                       F_lon_d_m,F_lat_d_m,F_x_d_m,F_y_d_m,F_z_d_m,F_u_a_m,F_v_a_m, 
     %                                       F_lon_a,F_lat_a,F_dt,i0,in,j0,jn )
*
      implicit none
*
      real F_lon_d(*),F_lat_d(*),F_x_d(*),F_y_d(*),F_z_d(*),F_u_a(*),F_v_a(*),F_dt
*
      real F_lon_d_m(*),F_lat_d_m(*),F_x_d_m(*),F_y_d_m(*),F_z_d_m(*),F_u_a_m(*),F_v_a_m(*)
      real F_lon_a  (*),F_lat_a  (*)
*
      integer i0,in,j0,jn
*
*author M.Tanguay
*
*revision
* v3_35 - Tanguay M.      - initial MPI version
* v3_35 - Tanguay M.      - SETTLS option a la Ritchie/Girard 
*
*object
*     see id section
*
*implicits
#include "glb_ld.cdk"
#include "adw.cdk"
#include "dcst.cdk"
************************************************************************
      integer n, ij, nij,vnij, i,j,k
*
      real*8  sa_8, ca_8, cai_8, so_8, co_8, x_8, y_8, z_8,
     %        ux_8, uy_8, uz_8, sinal_8, cosal_8, r2pi_8, TWO_8
*
      real*8  ux_m_8, uy_m_8, uz_m_8, sinal_m_8, cosal_m_8, 
     %        xyz_m_8, sxyz_m_8, rsqrt_uv_m_8  
*
      real*8  xsin_8(i0:in,j0:jn),  ysin_8(i0:in,j0:jn)
      real*8 xasin_8(i0:in,j0:jn), yasin_8(i0:in,j0:jn)
      real*8 xatan_8(i0:in,j0:jn), yatan_8(i0:in,j0:jn), zatan_8(i0:in,j0:jn)
      real*8  ycos_8(i0:in,j0:jn)
*
      real*8  xsin_m_8(i0:in,j0:jn),  ysin_m_8(i0:in,j0:jn)
      real*8 xasin_m_8(i0:in,j0:jn), yasin_m_8(i0:in,j0:jn)
      real*8 xatan_m_8(i0:in,j0:jn), yatan_m_8(i0:in,j0:jn), zatan_m_8(i0:in,j0:jn)
      real*8  ycos_m_8 (i0:in,j0:jn)
*
      real*8   xy2_m_8 (i0:in,j0:jn), sz2_m_8 (i0:in,j0:jn)
*
      parameter (TWO_8 = 2.0)
*
************************************************************************
      nij  = l_ni*l_nj
      vnij = (in-i0+1)*(jn-j0+1)
*
      r2pi_8 = TWO_8 * Dcst_pi_8
************************************************************************
*
!$omp parallel do private(n,ij,
!$omp&  sa_8,ca_8,cai_8,so_8,co_8,x_8,y_8,z_8,
!$omp&  ux_8,uy_8,uz_8,sinal_8,cosal_8,
!$omp&  ux_m_8,uy_m_8,uz_m_8,sinal_m_8,cosal_m_8,
!$omp&  xsin_8,ysin_8,xasin_8,yasin_8,
!$omp&  xatan_8,yatan_8,zatan_8,ycos_8,
!$omp&  xsin_m_8,ysin_m_8,xasin_m_8,yasin_m_8,
!$omp&  xatan_m_8,yatan_m_8,zatan_m_8,ycos_m_8,
!$omp&  xy2_m_8,sz2_m_8,xyz_m_8,sxyz_m_8,
!$omp&  rsqrt_uv_m_8)
*
      do k=1,l_nk
         do j=j0,jn
         do i=i0,in
*
            n = (k-1)*nij + ((j-1)*l_ni) + i
*
            ij = mod( n-1, nij ) + 1
*
*           TRAJ
*           ----
            xsin_m_8(i,j) = sqrt( F_u_a_m(n) ** 2 + F_v_a_m(n) ** 2 ) * F_dt
C           ysin_m_8(i,j) = sin(xsin_m_8(i,j))
*
C           ycos_m_8(i,j) = cos(xsin_m_8(i,j))
*
         enddo
         enddo
*
         call vsin(ysin_m_8, xsin_m_8, vnij)
*
         do j=j0,jn
         do i=i0,in
*
            n = (k-1)*nij + ((j-1)*l_ni) + i
            ij = mod( n-1, nij ) + 1
*
*           TRAJ
*           ----
            ycos_m_8(i,j) = sqrt( ( 1.0 + ysin_m_8(i,j) ) * ( 1.0 - ysin_m_8(i,j) ) )
*
            rsqrt_uv_m_8 = 1.0D0/sqrt(F_u_a_m(n)**2+F_v_a_m(n)**2)
*
*           TLM
*           ---
            xsin_8(i,j) = ( (F_u_a_m(n)*F_u_a(n)+F_v_a_m(n)*F_v_a(n)) * rsqrt_uv_m_8 ) * F_dt
*
            ysin_8(i,j) =  ycos_m_8(i,j) * xsin_8(i,j)
*
            ycos_8(i,j) = -ysin_m_8(i,j) * xsin_8(i,j)
*
************************************************************************
* cartesian coordinates of ARRIVAL grid points                         *
************************************************************************
            x_8 = cos(F_lon_a(n)) 
            y_8 = sin(F_lon_a(n)) 
            z_8 = sin(F_lat_a(n)) 
*
            x_8 = x_8 * cos(F_lat_a(n)) 
            y_8 = y_8 * cos(F_lat_a(n)) 
************************************************************************
* if very small wind set DESTINATION grid point to ARRIVAL grid point  *
************************************************************************
            if ( abs(F_u_a_m(n))+abs(F_v_a_m(n)) .lt. 1.e-10 ) then
*
                 F_x_d  (n) = 0.
                 F_y_d  (n) = 0.
                 F_z_d  (n) = 0.
*
                 F_x_d_m(n) = x_8
                 F_y_d_m(n) = y_8
                 F_z_d_m(n) = z_8
*
                 goto 99
*
            endif
************************************************************************
* sin and cosin of first guess of ARRIVAL positions                    *
************************************************************************
            sa_8  = sin(F_lat_a(n)) 
            ca_8  = cos(F_lat_a(n))
            so_8  = sin(F_lon_a(n)) 
            co_8  = cos(F_lon_a(n)) 
************************************************************************
* wind components in cartesian coordinate at ARRIVAL positions         *
************************************************************************
            ux_8   = (-F_u_a  (n)*so_8 -F_v_a  (n)*co_8*sa_8)
            uy_8   = ( F_u_a  (n)*co_8 -F_v_a  (n)*so_8*sa_8)
            uz_8   =   F_v_a  (n)*ca_8
*
            ux_m_8 = (-F_u_a_m(n)*so_8 -F_v_a_m(n)*co_8*sa_8)
            uy_m_8 = ( F_u_a_m(n)*co_8 -F_v_a_m(n)*so_8*sa_8)
            uz_m_8 =   F_v_a_m(n)*ca_8
*
*           Evaluate V_a
*           ------------
C           cosal_8   = sqrt( ( 1.0 + ysin_8(i,j) ) * ( 1.0 - ysin_8(i,j) ) )
            cosal_m_8 = ycos_m_8(i,j)
            cosal_8   = ycos_8  (i,j)
*
            xyz_m_8   = ux_m_8*ux_m_8+uy_m_8*uy_m_8+uz_m_8*uz_m_8
            sxyz_m_8  = sqrt(xyz_m_8)
*
            sinal_m_8 = ysin_m_8(i,j) / sxyz_m_8 
*
            sinal_8   =   ysin_8(i,j) / sxyz_m_8 
     %                  - sinal_m_8   * ( (ux_m_8*ux_8 + uy_m_8*uy_8 + uz_m_8*uz_8) / xyz_m_8 )
*
*           Evaluate r_d = cos(A) r_a - sin (A) V_a/|V_a|
*           ---------------------------------------------
            F_x_d(n)   = cosal_8   * x_8 - sinal_8   * ux_m_8 - sinal_m_8 * ux_8 
            F_y_d(n)   = cosal_8   * y_8 - sinal_8   * uy_m_8 - sinal_m_8 * uy_8 
            F_z_d(n)   = cosal_8   * z_8 - sinal_8   * uz_m_8 - sinal_m_8 * uz_8 
*
            F_x_d_m(n) = cosal_m_8 * x_8 - sinal_m_8 * ux_m_8
            F_y_d_m(n) = cosal_m_8 * y_8 - sinal_m_8 * uy_m_8
            F_z_d_m(n) = cosal_m_8 * z_8 - sinal_m_8 * uz_m_8
*
C  99       F_z_d(n) = min(1.0D0,max(1.0d0*F_z_d(n),-1.0D0))
   99       continue
*
            if ( F_z_d_m(n) .lt. -1.0D0 ) then
                 F_z_d_m(n) = -1.0D0
                 F_z_d  (n) =  0.0D0
            elseif ( F_z_d_m(n)  .gt.  1.0D0 ) then
                 F_z_d_m(n) =  1.0D0
                 F_z_d  (n) =  0.0D0
            endif
*
            xasin_m_8(i,j) = F_z_d_m(n)
            xatan_m_8(i,j) = F_x_d_m(n)
            yatan_m_8(i,j) = F_y_d_m(n)
*
            sz2_m_8  (i,j) = sqrt(1.0 - F_z_d_m(n)*F_z_d_m(n))
            xy2_m_8  (i,j) = F_x_d_m(n)*F_x_d_m(n) + F_y_d_m(n)*F_y_d_m(n)
*
         enddo
         enddo
*
            call vasin  ( yasin_m_8, xasin_m_8,            vnij )
            call vatan2 ( zatan_m_8, yatan_m_8, xatan_m_8, vnij )
*
         do j=j0,jn
         do i=i0,in
*
            n = (k-1)*nij + ((j-1)*l_ni) + i
            ij = mod( n-1, nij ) + 1
*
*           Evaluate (lon_d,lat_d) of r_d
*           -----------------------------
*
*           TRAJECTORY
*           ----------
            F_lat_d_m(n) = yasin_m_8(i,j)
            F_lon_d_m(n) = zatan_m_8(i,j)
*
*           TLM
*           ---
            if ( abs(F_z_d_m(n)) .ne. 1.0D0 ) then
                 F_lat_d(n) =  F_z_d(n) / sz2_m_8(i,j)
            else
                 F_lat_d(n) =  0.0D0
            endif
*
            F_lon_d(n) = (F_x_d_m(n)*F_y_d (n) - F_y_d_m(n)*F_x_d (n)) / xy2_m_8(i,j)
*
*           TRAJECTORY + TLM
*           ----------------
            if ( F_lon_d_m(n) .lt. 0.0 ) F_lon_d_m(n) = F_lon_d_m(n) + r2pi_8
*
         end do   
         end do   
*
      enddo
!$omp end parallel do
*
      return
      end
