!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
***s/r v4d_ctrlcst - Control cost function  
*
#include "model_macros_f.h"
*
      subroutine v4d_ctrlcst ()
*
      use v4d_prof 
*
      implicit none
*
*author
*     M.Tanguay
*
*revision
* v2_10 - Tanguay M.        - initial MPI version
* v3_00 - Ek N./Tanguay M.  - add v4d_cstjok and V4dg_4dvar_L
* v3_01 - Morneau J.        - read obs from file and add TLM in cost function 
*                             for V4dg_sensib_L = .T.
* v3_01 - Tanguay M.        - add V4dg_sgvc_L
* v3_11 - Tanguay M.        - No profiles when Pr_nevent=EVN_TLME 
*                           - Write/Read TRAJ for conv. moved to v4d_rwconv0
*                           - ADJ of digital filter
* v3_35 - Tanguay M.        - Treat Profiles at each time step
*
*object
*  see id section	
*
*arguments
*  none
*
*implicits
#include "v4dg.cdk"
#include "lctl.cdk"
#include "tr3d.cdk"
#include <prof_f.h>
#include "init.cdk"
#include "rstr.cdk"
#include "path.cdk"
#include "lun.cdk"
#include "ptopo.cdk"
#include "step.cdk"
*
      logical time0_L, time_L
      integer kstatus,ierr,nbin
      character(len=2) :: cljx_S, cljy_S, cstp_S
*
      call flush(Lun_out)
*
      if(V4dg_conf/100.ne.1.or.V4dg_sgvc_L.or.Pr_nevent.eq.EVN_TLME) return 
*
      if(V4dg_di_L) return 
*
*     ----------------------------------------
*     Sensitivity analysis or Twin experiments
*     ----------------------------------------
      if(.not.V4dg_4dvar_L) then
*
*       Verify if INITIAL TIME requested
*       --------------------------------
        time0_L = Lctl_step.eq.0.and.V4dg_inv.ne.1
*
*       Verify if .NOT.INITIAL time requested
*       -------------------------------------
        time_L = Lctl_step.ne.0.and.mod(Lctl_step,V4dg_stepob).eq.0
        if(Init_balgm_L.and..not.Rstri_idon_L.and.Lctl_step.ge.(Init_dfnp-1)/2) time_L = .false.
*
        if(.not.(time0_L.or.time_L)) return
*
*       Store simulated OBSERVATIONS
*       ----------------------------
        if(V4dg_twin_L.and.V4dg_status.eq.5) then
*
           V4dg_rwob = 1
           call v4d_rwobfr (1)
*
        endif
*       --------------------------------------
*       Read and Store OBSERVATIONS if request
*        -------------------------------------
        if(V4dg_sensib_L.and.V4dg_status.eq.5) then 
*
*         Read on random file
*
          call v4d_rdobs
*
*         Store on WA file  
*         ----------------
          V4dg_rwob = 2
          call v4d_rwobfr(1)
*
        endif
*
*       Store contribution to FORCINGS and Evaluate cost function
*       ---------------------------------------------------------
        if(V4dg_status.ne.5) then
*
           call v4d_cststep ()
*
        endif
*
*     -----------------------------
*     4D-Var + exchange with 3D-Var
*     -----------------------------
      elseif(V4dg_4dvar_L) then
*
*       Establish at which bin we are  
*       -----------------------------
        nbin = (Lctl_step - Pr_ibin0) / V4dg_stepob + 1
*
*       Verify if INITIAL TIME requested
*       --------------------------------
        time0_L = Lctl_step.eq.0.and.Pr_doobs(Lctl_step).gt.0.and.Pr_nob(nbin).gt.0
*
*       Verify if .NOT.INITIAL time requested
*       -------------------------------------
        time_L = Lctl_step.ne.0.and.Pr_doobs(Lctl_step).gt.0.and.Pr_nob(nbin).gt.0
        if(Init_balgm_L.and..not.Rstri_idon_L.and.Lctl_step.ge.(Init_dfnp-1)/2) time_L = .false.
*
*       Open dwyf PROF file to write the model profiles
*       -----------------------------------------------
        if (time0_L.or.time_L) then
*
            write(cstp_S,'(i2.2)') Lctl_step 
            write(cljx_S,'(i2.2)') Ptopo_mycol
            write(cljy_S,'(i2.2)') Ptopo_myrow
*
            Pr_type2file_S = trim(Path_xchg_S) // '/' // cljx_S//'_'//cljy_S//'_'//cstp_S//'/dwyf_'
     %                       //cljx_S//'_'//cljy_S//'_'//cstp_S//'.prof'
*
            write(Lun_out,*) 'Opening dwyf MODEL-PROFILE output file NAME=',Pr_type2file_S
*
            Pr_ihdlout = prof_open (Pr_type2file_S,'WRITE','FILE')
*
            if(Pr_ihdlout.le.0) then
               write(Lun_out,*) 'Cannot open MODEL-PROFILE output file !'
               kstatus = - 99
            endif
*
        endif
*
*       ------------------------------------------------------------------
*       Interpolate model states at obs. locations and
*       output the result to be read by 3D-Var
*       ------------------------------------------------------------------
*       (NOTE: We get into v4d_cstjok even if no profiles 
*        are calculated for this bin since we need to do MPI communication) 
*       ------------------------------------------------------------------
        call tmg_start ( 53, 'CSTJOK' )
        call v4d_cstjok(time0_L.or.time_L)
        call tmg_stop ( 53 )
*
*       Close dwyf PROF file to be used by 3D-Var
*       -----------------------------------------
        if (time0_L.or.time_L) then
*
            write(Lun_out,*) 'Closing dwyf MODEL-PROFILE output file NAME=',Pr_type2file_S
*
            ierr = prof_close(Pr_ihdlout)
*
            if(ierr .lt. 0) then
               if (Lun_out.gt.0) write(Lun_out,*) 'Error in closing dwyf PROF file'
               call gem_stop('V4D_CTRLCST: Error in closing dwyf PROF file',-1)
            endif
*
        endif
*
      endif
*
      call flush(Lun_out)
*
      return
      end
