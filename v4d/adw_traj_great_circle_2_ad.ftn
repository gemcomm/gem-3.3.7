!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
***s/r adw_traj_great_circle_2_ad - ADJ of adw_traj_great_circle_2_tl 
*
#include "model_macros_f.h"
*
      subroutine adw_traj_great_circle_2_ad (F_lon_d,F_lat_d,F_x_d,F_y_d,F_z_d,F_u_d,F_v_d,F_lon_a,F_lat_a,
     %                                       F_lon_d_m,F_lat_d_m,F_u_d_m,F_v_d_m,F_lon_a_m,F_lat_a_m,
     %                                       F_dt,i0,in,j0,jn )
*
      implicit none
*
      real F_lon_d(*),F_lat_d(*),F_x_d(*),F_y_d(*),F_z_d(*),F_u_d(*),F_v_d(*),F_dt
      real F_lon_a(*),F_lat_a(*)
*
      real F_lon_d_m(*),F_lat_d_m(*),F_u_d_m(*),F_v_d_m(*)
      real F_lon_a_m(*),F_lat_a_m(*)
*
      integer i0,in,j0,jn
*
*author M.Tanguay
*
*revision
* v3_35 - Tanguay M.      - initial MPI version
* v3_35 - Tanguay M.      - SETTLS option a la Ritchie/Girard 
*
*object
*     see id section
*
*implicits
#include "glb_ld.cdk"
#include "adw.cdk"
#include "dcst.cdk"
************************************************************************
      integer n, ij, nij,vnij, i,j,k
*
      real*8  sa_8, ca_8, so_8, co_8, x_8, y_8, z_8,
     %        ux_8, uy_8, uz_8, sinal_8, cosal_8, r2pi_8, TWO_8
*
      real*8  sa_m_8, ca_m_8, so_m_8, co_m_8, x_m_8, y_m_8, z_m_8, w_m_8, k_m_8,
     %        ux_m_8, uy_m_8, uz_m_8, sinal_m_8, cosal_m_8, xyz_m_8, sxyz_m_8
*
      real*8  ux1_m_8, uy1_m_8, uz1_m_8, x1_m_8, y1_m_8, z1_m_8, sinal2_m_8,
     %        sz2_m_8, xy2_m_8, ycos_m_8   
*
      real*8  xsin_8(i0:in,j0:jn), ysin_8(i0:in,j0:jn), ycos_8(i0:in,j0:jn)
*
      real*8  ysin_m_8(i0:in,j0:jn), sqrt_uv_m_8(i0:in,j0:jn)
*
      real zm3
*
      real p_x_d_m,p_y_d_m,p_z_d_m
*
      parameter (TWO_8 = 2.0)
*
************************************************************************
      nij  = l_ni*l_nj
      vnij = (in-i0+1)*(jn-j0+1)
*
      r2pi_8 = TWO_8 * Dcst_pi_8
*
************************************************************************
*
!$omp parallel private(n,ij,
!$omp&  sa_8,ca_8,so_8,co_8,x_8,y_8,z_8,
!$omp&  ux_8,uy_8,uz_8,sinal_8,cosal_8,
!$omp&  sa_m_8,ca_m_8,so_m_8,co_m_8,x_m_8,y_m_8,z_m_8,w_m_8,k_m_8,
!$omp&  ux_m_8,uy_m_8,uz_m_8,sinal_m_8,cosal_m_8,xyz_m_8,sxyz_m_8,
!$omp&  ux1_m_8,uy1_m_8,uz1_m_8,x1_m_8,y1_m_8,z1_m_8,sinal2_m_8,
!$omp&  sz2_m_8,xy2_m_8,ycos_m_8,
!$omp&  xsin_8,ysin_8,ycos_8,
!$omp&  ysin_m_8, sqrt_uv_m_8,
!$omp&  zm3,p_x_d_m,p_y_d_m,p_z_d_m)
*
!$omp do
      do k=l_nk,1,-1
*
         do j=jn,j0,-1
         do i=in,i0,-1
*
            n = (k-1)*nij + ((j-1)*l_ni) + i
*
            ij = mod( n-1, nij ) + 1
*
*           TRAJECTORY
*           ----------
            sqrt_uv_m_8(i,j) = sqrt( F_u_d_m(n)**2 + F_v_d_m(n)**2 )
C           xsin_m_8   (i,j) = sqrt_uv_m_8(i,j) * F_dt 
            ysin_m_8   (i,j) = sqrt_uv_m_8(i,j) * F_dt
C           ysin_m_8   (i,j) = sin(xsin_m_8(i,j))
*
         end do
         end do
*
C        call vsin(ysin_m_8, xsin_m_8, vnij)
         call vsin(ysin_m_8, ysin_m_8, vnij)
*
         do j=jn,j0,-1
         do i=in,i0,-1
*
            n = (k-1)*nij + ((j-1)*l_ni) + i
*
            ij = mod( n-1, nij ) + 1
*
C           ycos_m_8(i,j) = cos(xsin_m_8(i,j))
            ycos_m_8      = sqrt( ( 1.0 + ysin_m_8(i,j) ) * ( 1.0 - ysin_m_8(i,j) ) )
*
************************************************************************
* cartesian coordinates of ARRIVAL grid points                         *
************************************************************************
            x_m_8 = cos(F_lon_a_m(n)) 
            y_m_8 = sin(F_lon_a_m(n)) 
            z_m_8 = sin(F_lat_a_m(n)) 
*
            w_m_8 = cos(F_lat_a_m(n))
            k_m_8 = sin(F_lat_a_m(n))
*
            x1_m_8 = x_m_8
            y1_m_8 = y_m_8
            z1_m_8 = z_m_8
*
C           x_m_8 = x_m_8 * cos(F_lat_a_m(n)) 
C           y_m_8 = y_m_8 * cos(F_lat_a_m(n)) 
            x_m_8 = x_m_8 * w_m_8 
            y_m_8 = y_m_8 * w_m_8 
************************************************************************
* if very small wind set DESTINATION grid point to ARRIVAL grid point  *
************************************************************************
            if ( abs(F_u_d_m(n))+abs(F_v_d_m(n)) .lt. 1.e-10 ) then
*
                 p_x_d_m = x_m_8
                 p_y_d_m = y_m_8
                 p_z_d_m = z_m_8
*
                 goto 99
            endif
************************************************************************
* sin and cosin of first guess of DESTINATION positions                *
************************************************************************
            sa_m_8  = sin(F_lat_d_m(n)) 
            ca_m_8  = cos(F_lat_d_m(n))
            so_m_8  = sin(F_lon_d_m(n)) 
            co_m_8  = cos(F_lon_d_m(n)) 
************************************************************************
* wind components in cartesian coordinate at DESTINATION positions     *    
************************************************************************
            ux_m_8 = ( - F_u_d_m(n) * so_m_8 - F_v_d_m(n) * co_m_8 * sa_m_8 )
            uy_m_8 = (   F_u_d_m(n) * co_m_8 - F_v_d_m(n) * so_m_8 * sa_m_8 )
            uz_m_8 =     F_v_d_m(n) * ca_m_8
*
            ux1_m_8 = ux_m_8 
            uy1_m_8 = uy_m_8 
            uz1_m_8 = uz_m_8 
*
*           Evaluate - r_a x (r_a x V_d) 
*           ----------------------------
            sinal_m_8 = x_m_8 * ux_m_8 + y_m_8 * uy_m_8 + z_m_8 * uz_m_8
*
            sinal2_m_8 = sinal_m_8 
*
            ux_m_8 = ux_m_8 - x_m_8 * sinal_m_8
            uy_m_8 = uy_m_8 - y_m_8 * sinal_m_8
            uz_m_8 = uz_m_8 - z_m_8 * sinal_m_8
*
C           cosal_8   = sqrt( ( 1.0 + ysin_8(i,j) ) * ( 1.0 - ysin_8(i,j) ) )
            cosal_m_8 = ycos_m_8
*
            xyz_m_8   = ux_m_8*ux_m_8+uy_m_8*uy_m_8+uz_m_8*uz_m_8
            sxyz_m_8  = sqrt(xyz_m_8)
*
            sinal_m_8 = ysin_m_8(i,j) / sxyz_m_8
*
*           Evaluate r_d = cos(A) r_a + sin (A) r_a x (r_a x V_d) /|r_a x (r_a x V_d)|
*           --------------------------------------------------------------------------
            p_x_d_m = cosal_m_8 * x_m_8 - sinal_m_8 * ux_m_8
            p_y_d_m = cosal_m_8 * y_m_8 - sinal_m_8 * uy_m_8
            p_z_d_m = cosal_m_8 * z_m_8 - sinal_m_8 * uz_m_8
*
C  99       p_z_d_m = min(1.0D0,max(1.0d0*p_z_d_m,-1.0D0))
   99       continue
*
            zm3 = p_z_d_m
*
            if ( p_z_d_m .lt. -1.0D0 ) then
                 zm3 = -1.0D0
            elseif ( p_z_d_m  .gt.  1.0D0 ) then
                 zm3 =  1.0D0
            endif
*
            sz2_m_8 = sqrt(1.0 - zm3*zm3)
            xy2_m_8 = p_x_d_m*p_x_d_m + p_y_d_m*p_y_d_m
*
*           --------------------
*           Adjoint calculations
*           --------------------
*
            F_y_d  (n) = (  p_x_d_m*F_lon_d(n)) / xy2_m_8 + F_y_d (n)
            F_x_d  (n) = (- p_y_d_m*F_lon_d(n)) / xy2_m_8 + F_x_d (n)
            F_lon_d(n) = 0.0
*
            if ( abs(p_z_d_m) .ne. 1.0D0 ) then
                 F_z_d  (n) = F_lat_d(n) / sz2_m_8 + F_z_d(n)
                 F_lat_d(n) = 0.
            else
                 F_lat_d(n) = 0.0D0
            endif
*
            if ( p_z_d_m .lt. -1.0D0 ) then
                 F_z_d  (n) =  0.0D0
            elseif ( p_z_d_m  .gt.  1.0D0 ) then
                 F_z_d  (n) =  0.0D0
            endif
*
            if ( abs(F_u_d_m(n))+abs(F_v_d_m(n)) .ge. 1.e-10 ) then
*
*           Adjoint of 
*           Evaluate r_d = cos(A) r_a + sin (A) r_a x (r_a x V_d) /|r_a x (r_a x V_d)|
*           --------------------------------------------------------------------------
*
            cosal_8 =   F_z_d(n)  *  z_m_8 +  F_y_d(n) *  y_m_8 + F_x_d(n) *  x_m_8 
            sinal_8 = - F_z_d(n)  * uz_m_8 -  F_y_d(n) * uy_m_8 - F_x_d(n) * ux_m_8 
*
            uz_8    = - sinal_m_8 * F_z_d(n) 
            uy_8    = - sinal_m_8 * F_y_d(n) 
            ux_8    = - sinal_m_8 * F_x_d(n) 
            z_8     =   cosal_m_8 * F_z_d(n) 
            y_8     =   cosal_m_8 * F_y_d(n) 
            x_8     =   cosal_m_8 * F_x_d(n)
            F_z_d(n)= 0.
            F_y_d(n)= 0.
            F_x_d(n)= 0.
*
*           Adjoint of
*           Evaluate - r_a x (r_a x V_d)
*           ----------------------------
            ysin_8(i,j) =   sinal_8   / sxyz_m_8                   
            ux_8        = - sinal_m_8 * ( (ux_m_8*sinal_8) / xyz_m_8 ) + ux_8
            uy_8        = - sinal_m_8 * ( (uy_m_8*sinal_8) / xyz_m_8 ) + uy_8
            uz_8        = - sinal_m_8 * ( (uz_m_8*sinal_8) / xyz_m_8 ) + uz_8
*
            ycos_8(i,j) = cosal_8 
*
            sinal_m_8 = sinal2_m_8
*
            z_8     = - uz_8  * sinal_m_8 + z_8
            y_8     = - uy_8  * sinal_m_8 + y_8
            x_8     = - ux_8  * sinal_m_8 + x_8
            sinal_8 = - z_m_8 * uz_8 - y_m_8 * uy_8 - x_m_8 *  ux_8 
*
            ux_m_8  = ux1_m_8
            uy_m_8  = uy1_m_8
            uz_m_8  = uz1_m_8
*
            x_8     = sinal_8 * ux_m_8   + x_8
            y_8     = sinal_8 * uy_m_8   + y_8
            z_8     = sinal_8 * uz_m_8   + z_8
            ux_8    = x_m_8   * sinal_8  + ux_8
            uy_8    = y_m_8   * sinal_8  + uy_8
            uz_8    = z_m_8   * sinal_8  + uz_8
*
            F_v_d(n) =  uz_8      * ca_m_8 + F_v_d(n)
            ca_8     = F_v_d_m(n) * uz_8   
*
            F_u_d(n) = (   uy_8       * co_m_8          ) + F_u_d(n)
            co_8     = (   F_u_d_m(n) * uy_8            ) 
            F_v_d(n) = ( - uy_8       * so_m_8 * sa_m_8 ) + F_v_d(n)
            so_8     = ( - F_v_d_m(n) * uy_8   * sa_m_8 ) 
            sa_8     = ( - F_v_d_m(n) * so_m_8 * uy_8   )  
*
            F_u_d(n) = ( -       ux_8 * so_m_8          ) + F_u_d(n)
            so_8     = ( - F_u_d_m(n) * ux_8            ) + so_8
            F_v_d(n) = ( -       ux_8 * co_m_8 * sa_m_8 ) + F_v_d(n)
            co_8     = ( - F_v_d_m(n) * ux_8   * sa_m_8 ) + co_8
            sa_8     = ( - F_v_d_m(n) * co_m_8 * ux_8   ) + sa_8
*
C           F_lon_d(n) = -sin(F_lon_d_m(n)) * co_8 + F_lon_d(n)
C           F_lon_d(n) =  cos(F_lon_d_m(n)) * so_8 + F_lon_d(n)
C           F_lat_d(n) = -sin(F_lat_d_m(n)) * ca_8 + F_lat_d(n)
C           F_lat_d(n) =  cos(F_lat_d_m(n)) * sa_8 + F_lat_d(n)
            F_lon_d(n) = -so_m_8 * co_8 + F_lon_d(n)
            F_lon_d(n) =  co_m_8 * so_8 + F_lon_d(n)
            F_lat_d(n) = -sa_m_8 * ca_8 + F_lat_d(n)
            F_lat_d(n) =  ca_m_8 * sa_8 + F_lat_d(n)
*
            else
*
            z_8      =  F_z_d(n) 
            y_8      =  F_y_d(n) 
            x_8      =  F_x_d(n) 
            F_x_d(n) = 0.
            F_y_d(n) = 0. 
            F_z_d(n) = 0. 
*
            endif 
*
            x_m_8 = x1_m_8
            y_m_8 = y1_m_8
            z_m_8 = z1_m_8
*
C           F_lat_a(n) = - y_m_8 * sin(F_lat_a_m(n)) * y_8 + F_lat_a(n)
C           y_8        =     y_8 * cos(F_lat_a_m(n))
C           F_lat_a(n) = - x_m_8 * sin(F_lat_a_m(n)) * x_8 + F_lat_a(n) 
C           x_8        =     x_8 * cos(F_lat_a_m(n)) 
            F_lat_a(n) = - y_m_8 * k_m_8 * y_8 + F_lat_a(n)
            y_8        =     y_8 * w_m_8 
            F_lat_a(n) = - x_m_8 * k_m_8 * x_8 + F_lat_a(n) 
            x_8        =     x_8 * w_m_8 
*
C           F_lat_a(n) =  cos(F_lat_a_m(n)) * z_8 + F_lat_a(n)
C           F_lon_a(n) =  cos(F_lon_a_m(n)) * y_8 + F_lon_a(n)
C           F_lon_a(n) = -sin(F_lon_a_m(n)) * x_8 + F_lon_a(n)
            F_lat_a(n) =  w_m_8 * z_8 + F_lat_a(n)
            F_lon_a(n) =  x_m_8 * y_8 + F_lon_a(n)
            F_lon_a(n) = -y_m_8 * x_8 + F_lon_a(n)
*
*           Adjoint
*           -------
            xsin_8(i,j) = -ysin_m_8(i,j) * ycos_8(i,j) 
*
            xsin_8(i,j) =  ycos_m_8      * ysin_8(i,j) + xsin_8(i,j)
*
            F_u_d(n)    = ( (F_u_d_m(n) * xsin_8(i,j)) / sqrt_uv_m_8(i,j) ) * F_dt + F_u_d(n)
            F_v_d(n)    = ( (F_v_d_m(n) * xsin_8(i,j)) / sqrt_uv_m_8(i,j) ) * F_dt + F_v_d(n) 
*
         end do
         end do
      enddo
*
!$omp enddo
!$omp end parallel
*
      return
      end
