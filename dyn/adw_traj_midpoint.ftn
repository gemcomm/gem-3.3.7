!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
***s/r adw_traj_midpoint - compute positions at mid-trajectory (m) by 
*                          interpolation using positions at 
*                          origin (o) (Based on adw_trajex)
*
#include "model_macros_f.h"
*
      subroutine adw_traj_midpoint ( F_xtm,  F_ytm,  F_xctm, F_yctm,
     %                               F_zctm, F_xcto, F_ycto, F_zcto,i0,in,j0,jn)
*
#include "impnone.cdk"
*
      real   F_xtm (*), F_ytm (*), F_xctm(*), F_yctm(*),
     %       F_zctm(*), F_xcto(*), F_ycto(*), F_zcto(*)
      integer i0,in,j0,jn
*
*author M.Tanguay
*
*revision
* v3_35 - Tanguay M.      - initial MPI version
* v3_35 - Tanguay M.      - SETTLS option a la Ritchie/Girard 
*
*object
*     see id section
*
*arguments
*______________________________________________________________________
*              |                                                 |     |
* NAME         | DESCRIPTION                                     | I/O |
*--------------|-------------------------------------------------|-----|
*              |                                                 |     |
* F_xtm        | upstream x positions at mid-traj.               |  o  |
* F_ytm        | upstream y positions at mid-traj.               |  o  |
* F_xctm       | upstream x cartesian positions at mid-traj.     |  o  |
* F_yctm       | upstream y cartesian positions at mid-traj.     |  o  |
* F_zctm       | upstream z cartesian positions at mid-traj.     |  o  |
* F_xcto       | upstream x cartesian positions at origin        |  i  |
* F_ycto       | upstream y cartesian positions at origin        |  i  |
* F_zcto       | upstream z cartesian positions at origin        |  i  |
*______________|_________________________________________________|_____|
*
*implicits
#include "glb_ld.cdk"
#include "adw.cdk"
#include "dcst.cdk"
************************************************************************
      integer i,j,k, n, ij, nij, vnij
*
      real*8 prx, pry, prz, prnorm_8, inv_prnorm_8, r2pi_8, two,
     %       p_xctm_8,p_yctm_8,p_zctm_8 
*
      real*8 xasin(i0:in,j0:jn), yasin(i0:in,j0:jn)
      real*8 xatan(i0:in,j0:jn), yatan(i0:in,j0:jn), zatan(i0:in,j0:jn)
*
      parameter (two = 2.0)
************************************************************************
      nij  = l_ni*l_nj
      vnij = (in-i0+1)*(jn-j0+1)
*
      r2pi_8 = two * Dcst_pi_8
************************************************************************
*
!$omp  parallel 
!$omp& private (xasin,yasin,xatan,yatan,zatan,n,ij,prx,pry,prz,
!$omp&          p_xctm_8,p_yctm_8,p_zctm_8,prnorm_8,inv_prnorm_8)
*
!$omp do
      do k=1,l_nk
*
         do j=j0,jn
         do i=i0,in
*
             n = (k-1)*nij+((j-1)*l_ni) + i
            ij = mod( n-1, nij ) + 1
*
            pry = dble(Adw_cy2d_8(ij))
            prx = dble(Adw_cx2d_8(ij)) * pry
            pry = dble(Adw_sx2d_8(ij)) * pry
            prz = dble(Adw_sy2d_8(ij))
*
            p_xctm_8 = 0.5 * (dble(F_xcto(n)) + prx)
            p_yctm_8 = 0.5 * (dble(F_ycto(n)) + pry)
            p_zctm_8 = 0.5 * (dble(F_zcto(n)) + prz)
*
            prnorm_8 = sqrt( p_xctm_8 * p_xctm_8 +
     %                       p_yctm_8 * p_yctm_8 +
     %                       p_zctm_8 * p_zctm_8 )
*
            inv_prnorm_8 = 1.0/prnorm_8
*
            F_xctm(n) = p_xctm_8 * inv_prnorm_8
            F_yctm(n) = p_yctm_8 * inv_prnorm_8
            F_zctm(n) = p_zctm_8 * inv_prnorm_8
*
            xatan(i,j) = F_xctm(n)
            yatan(i,j) = F_yctm(n)
            xasin(i,j) = max(-1.,min(1.,F_zctm(n)))
*
         enddo
         enddo
*
         call vatan2(zatan, yatan, xatan, vnij)
         call vasin(yasin, xasin, vnij)
*
         do j=j0,jn
         do i=i0,in
             n = (k-1)*nij+((j-1)*l_ni) + i
            F_xtm(n) = zatan(i,j)
            F_ytm(n) = yasin(i,j)
            if ( F_xtm(n) .lt. 0.0 ) F_xtm(n) = F_xtm(n) + r2pi_8
         enddo
         enddo
      enddo
!$omp enddo
!$omp end parallel
*
      return
      end
