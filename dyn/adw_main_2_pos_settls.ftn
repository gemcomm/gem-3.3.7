!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
***s/r adw_main_2_pos_settls - Same as dw_main_2_pos but with SETTLS option 
*
#include "model_macros_f.h"
*
      subroutine adw_main_2_pos_settls ( F_it, F_u, F_v, F_w )
*
      implicit none
*
      integer F_it
      real F_u(*),F_v(*),F_w(*)
*
*author
*     alain patoine
*
*revision
* v2_31 - Desgagne M.    - removed stkmemw
* v2_31 - Tanguay M.     - gem_stop if Adw_fro_a.gt.0.and.V4dg_conf.ne.0
* v3_00 - Desgagne & Lee - Lam configuration
* v3_02 - Lee V.         - revert adw_exch_1 for GLB only, added adw_ckbd_lam
* v3_10 - Corbeil & Desgagne & Lee - AIXport+Opti+OpenMP
* v3_20 - Valin & Tanguay - Optimized SETINT/TRILIN 
* v3_20 - Gravel S.       - Change test a lower and upper boundaries
* v3_20 - Tanguay M.      - Improve alarm when points outside advection grid
* v3_20 - Dugas B.        - correct calculation for LAM when Glb_pil gt 7
* v3_21 - Lee V.          - bug correction, yth should not be modified.
* v3_31 - Desgagne M.     - new scope for operator + adw_cliptraj (LAM)
* v3_31 - Tanguay M.      - SETTLS option
* v3_35 - Tanguay M.      - SETTLS option a la Ritchie/Girard 
*
*language
*     fortran 77
*
*object
*     SETTLS: Estimate upstream position at t-dt using acceleration
*     (See Hortal et al. QJRMS, 2002)
*
*     At INPUT: F_u,F_v_F_w  = 2*V(r,t-dt)-V(r,t-2dt) (see adw_main_1_wnd_settls)
*               uth,vth,psdth=   V(r,t-dt)            (see adw_main_1_wnd_settls)
*
*arguments
*______________________________________________________________________
*        |                                                       |     |
* NAME   | DESCRIPTION                                           | I/O |
*--------|-------------------------------------------------------|-----|
* F_it   | total number of iterations for trajectory             |  i  |
*        |                                                       |     |
* F_u,F_v| input:  3 components of wind on advection grid        |  io |
* F_w    | output: 3 components of upstream positions at t1      |     |
*________|_______________________________________________________|_____|
*
*implicits
#include "glb_ld.cdk"
#include "glb_pil.cdk"
#include "lun.cdk"
#include "geomg.cdk"
#include "adw.cdk"
#include "dcst.cdk"
#include "cstv.cdk"
#include "vth.cdk"
#include "vt1.cdk"
#include "v4dg.cdk"
#include "lctl.cdk"
#include "step.cdk"
#include "orh.cdk"
#include "schm.cdk"
#include "ptopo.cdk"
*
*modules
      integer  vmmlod, vmmget, vmmuld
      external vmmlod, vmmget, vmmuld
************************************************************************
      logical doh
*
      integer pnerr, pnlkey1(30), pnlod
*
      integer i, j, k, n, ij, ijk, nij, nijk, it
      integer i1,j1,k1,nn
*
      integer outside,sum_outside,ier
*
      integer, dimension(l_ni*l_nj*l_nk) :: n1
      real,    dimension(l_ni*l_nj*l_nk) :: capx1,capy1,capz1
      real,    dimension(l_ni*l_nj*l_nk) :: wrkx1,wrky1,wrkz1,wrkc1,wrk_yt1
      real,    dimension(l_ni*l_nj*l_nk) :: wrkux1,wrkuy1,wrkuz1
      integer, dimension(:), allocatable :: n2
      real,    dimension(:), allocatable :: capx2,capy2,capz2
      real,    dimension(:), allocatable :: xpos2,ypos2,zpos2
*
      real,    dimension(l_ni*l_nj*l_nk) :: rlon,rlat,wu,wv
      real,    dimension(l_ni*l_nj*l_nk) :: xtp,ytp,xctp,yctp,zctp
*
      real dummy, dth
      real*8 r2pi_8,two,half,pdp,pdm
      parameter (two = 2.0,half=0.5)
*
      integer i0,in,j0,jn,indice
*
      logical done_once_L
      save done_once_L
      data done_once_L /.false./
*
      logical done_write_L
      data done_write_L/.false./
      save done_write_L
*
************************************************************************
      if( .not. Adw_nosetint_L                   ) call gem_stop ('ADW_MAIN_2_POS_SETTLS 1 not done',-1) 
      if(G_lam                                   ) call gem_stop ('ADW_MAIN_2_POS_SETTLS 2 not done',-1)
************************************************************************
*
      if (Lun_debug_L) write (Lun_out,1000)
*
      if (Lun_out.gt.0.and.Schm_settls_opt.eq.1.and..NOT.done_write_L) write(Lun_out,*) 'SETTLS VARIANT = A LA RITCHIE'
      if (Lun_out.gt.0.and.Schm_settls_opt.eq.2.and..NOT.done_write_L) write(Lun_out,*) 'SETTLS VARIANT = A LA GIRARD '
*
      nij    = l_ni   *l_nj
      nijk   = l_ni   *l_nj   *l_nk
*
      r2pi_8 = two * Dcst_pi_8
      dth    = Cstv_dt_8/2.
      pdp    = 1.d0 + 1.d-6
      pdm    = 1.d0 - 1.d-6
*
      pnlkey1(1) = VMM_KEY(xth)
      pnlkey1(2) = VMM_KEY(yth)
      pnlkey1(3) = VMM_KEY(zth)
      pnlkey1(4) = VMM_KEY(xcth)
      pnlkey1(5) = VMM_KEY(ycth)
      pnlkey1(6) = VMM_KEY(zcth)
      pnlkey1(7) = VMM_KEY(xt1)
      pnlkey1(8) = VMM_KEY(yt1)
      pnlkey1(9) = VMM_KEY(zt1)
      pnlkey1(10)= VMM_KEY(xct1)
      pnlkey1(11)= VMM_KEY(yct1)
      pnlkey1(12)= VMM_KEY(zct1)
      pnlkey1(13)= VMM_KEY(uth)
      pnlkey1(14)= VMM_KEY(vth)
      pnlkey1(15)= VMM_KEY(psdth)
*
      pnerr = vmmlod(pnlkey1,15)
*
      pnerr = VMM_GET_VAR(xth)
      pnerr = VMM_GET_VAR(yth)
      pnerr = VMM_GET_VAR(zth)
      pnerr = VMM_GET_VAR(xcth)
      pnerr = VMM_GET_VAR(ycth)
      pnerr = VMM_GET_VAR(zcth)
      pnerr = VMM_GET_VAR(xt1)
      pnerr = VMM_GET_VAR(yt1)
      pnerr = VMM_GET_VAR(zt1)
      pnerr = VMM_GET_VAR(xct1)
      pnerr = VMM_GET_VAR(yct1)
      pnerr = VMM_GET_VAR(zct1)
      pnerr = VMM_GET_VAR(uth)
      pnerr = VMM_GET_VAR(vth)
      pnerr = VMM_GET_VAR(psdth)
*
      i0=1
      in=l_ni
      j0=1
      jn=l_nj
      if (G_lam) then
          if (l_west)  i0=pil_w
          if (l_east)  in=l_niu - pil_e + 2
          if (l_south) j0=pil_s
          if (l_north) jn=l_njv - pil_n + 2
      endif
*
************************************************************************
      do it=1,F_it
************************************************************************
                     doh = .false.
      if (it .eq. 1) doh = .true.
*
      do n = 1,nijk
      wrk_yt1(n) = yt1(n)
      enddo

      if (G_lam) then
*
          call adw_cliptraj ( xt1, wrk_yt1, i0, in, j0, jn, 'IN1POS' )
*
      else
*
          call adw_exch_1 ( wrkx1, wrky1, wrkz1, wrkc1,xt1,wrk_yt1,zt1 )
*
          if ( V4dg_conf.ne.0.0 ) then
*
               outside = 0
*
               if ( Adw_fro_a .gt. 0 ) outside = 1
*
               sum_outside = 0
               call rpn_comm_Allreduce(outside,sum_outside,1,"MPI_INTEGER",
     $                                 "MPI_SUM","grid",ier)
*
            if(sum_outside.ne.0.and..not.done_once_L.and.Ptopo_myproc.eq.0) then
                write(Lun_out,*) 'NUMBER OF PE WITH OUTSIDERS IN ADW_MAIN_2_POS_SETTLS AT current TIME-CN-IT = ',sum_outside
                call flush(Lun_out)
            endif
*
          endif
*
          allocate(capx2(max(1,Adw_fro_a)),
     %             capy2(max(1,Adw_fro_a)),
     %             capz2(max(1,Adw_fro_a)),
     %             xpos2 (max(1,Adw_fro_a)),
     %             ypos2 (max(1,Adw_fro_a)),
     %             zpos2 (max(1,Adw_fro_a)),
     %             n2 (max(1,Adw_fro_a)) )
          call adw_exch_2 ( xpos2, ypos2, zpos2,
     %                  wrkx1, wrky1, wrkz1,
     %                  Adw_fro_n, Adw_fro_s, Adw_fro_a,
     %                  Adw_for_n, Adw_for_s, Adw_for_a, 3 )
*
      endif
*
*     -----------------------------------------------------------------------------------
*     Part 1 of SETTLS: Evaluate [ 2 V(r_d,t-dt)-V(r_d,t-2dt) ] in wrkx1,wrky1 (U-V only)
*     -----------------------------------------------------------------------------------
*     1)  INPUT: F_u,F_v     = 2*V(r,t-dt)-V(r,t-2dt)
*     2) OUTPUT: wrkx1,wrky1 = 2*V(r,t-dt)-V(r,t-2dt) interpolated at r_d = V_int
*     ---------------------------------------------------------------------------
*
      Adw_hor_L = doh 
      Adw_ver_L = .true. 
      call adw_trilin_turbo (wrkx1,F_u,1.0,xt1,wrk_yt1,zt1,capz1,
     %                       Adw_Fn_I,nijk,i0,in,j0,jn,l_nk)
      call adw_trilin_turbo (wrky1,F_v,1.0,xt1,wrk_yt1,zt1,capz1,
     %                       Adw_Fn_I,nijk,i0,in,j0,jn,l_nk)
*
      if (.not.G_lam) then

         if ( Adw_fro_a .gt. 0 ) then
*
*
              if ( Adw_ckbd_L ) call adw_ckbd ( ypos2 )
*
              call adw_setint ( n2, capx2, dummy, dummy, capy2, dummy,
     %                     dummy, capz2, dummy, xpos2, ypos2, zpos2,
     %                    .true., .true., .true., Adw_fro_a,1,Adw_fro_a,1,1,1)
*
              call adw_trilin ( xpos2, F_u, 1.0, n2, capx2, capy2, capz2,
     %                     Adw_fro_a,1,Adw_fro_a,1,1,1)
              call adw_trilin ( ypos2, F_v, 1.0, n2, capx2, capy2, capz2,
     %                     Adw_fro_a,1,Adw_fro_a,1,1,1)
*
         endif
*
         call adw_exch_2 ( wrkz1, wrk_yt1, dummy,
     %                  xpos2, ypos2, dummy,
     %                  Adw_for_n, Adw_for_s, Adw_for_a,
     %                  Adw_fro_n, Adw_fro_s, Adw_fro_a, 2)
*
         if ( Adw_for_a .gt. 0 )
     %         call adw_exch_3 ( wrkx1, wrky1, wrkz1, wrk_yt1, wrkc1, 2 )
*
         deallocate(capx2,capy2,capz2,xpos2,ypos2,zpos2,n2)
      endif
*
!$omp parallel do private(n)
      do k=1,l_nk
      do j=1,l_nj
      do i=1,l_ni
         n = l_ni*l_nj*(k-1) + l_ni*(j-1) + i
         wu(n) = uth(i,j,k)
         wv(n) = vth(i,j,k)
      enddo
      enddo
      enddo
!$omp end parallel do
*
*     ----------------------------
*     SETTLS VARIANT: A LA RITCHIE
*     ----------------------------
      if (Schm_settls_opt.eq.1) then
*
*         Part 2 of SETTLS: Evaluate V_d = 0.5 * (V_int + V(r,t-dt)) in cartesian coordinates
*         -----------------------------------------------------------------------------------
          call adw_traj_addition (wrkux1, wrkuy1, wrkuz1, wrkx1, wrky1, wu, wv,
     %                            xt1, yt1, i0, in, j0, jn)
*
*         Part 3 of SETTLS: Evaluate r_d = b [r - dt/a V_d]
*         -------------------------------------------------
          call adw_traj_update (xt1, yt1, xct1, yct1, zct1, wrkux1, wrkuy1, wrkuz1,
     %                          i0, in, j0, jn, Cstv_dt_8)
*
*     ---------------------------
*     SETTLS VARIANT: A LA GIRARD
*     ---------------------------
      elseif (Schm_settls_opt.eq.2) then
*
*         Part 2 of SETTLS: Rotate with respect to the great circle defined by V_arrival at r
*         -----------------------------------------------------------------------------------
*         NOTE: V_arrival = V(r,t-dt) in (uth,vth)
*         ----------------------------------------
*
!$omp parallel do private(n)
          do k=1,l_nk
          do j=1,l_nj
          do i=1,l_ni
             n = l_ni*l_nj*(k-1) + l_ni*(j-1) + i
             rlon(n) = Geomg_x_8(i)
             rlat(n) = Geomg_y_8(j)
          enddo
          enddo
          enddo
!$omp end parallel do
*
          if (it.eq.1) then
          call adw_traj_great_circle_1 ( xtp, ytp, xctp, yctp, zctp, wu, wv, rlon, rlat, dth,
     %                                   i0,in,j0,jn )
          endif
*
*         Part 3 of SETTLS: Rotate with respect to the great circle defined by V_destination at r_d
*         -----------------------------------------------------------------------------------------
*         NOTE: V_destination = 2*V(r_d,t-dt)-V(r_d,t-2dt) at r_d in (wrkx1,wrky1)
*         ------------------------------------------------------------------------
          call adw_traj_great_circle_2 ( xt1, yt1, xct1, yct1, zct1, wrkx1, wrky1, xtp, ytp, dth,
     %                                   i0,in,j0,jn )
*
      endif
*
c     ==================================================================
c     3D interpolation of zeta dot
c     ==================================================================
*
!$omp parallel do 
      do n = 1,nijk
         wrk_yt1(n) = yt1(n)
      enddo
!$omp end parallel do
*
      if (G_lam) then
*
          call adw_cliptraj ( xt1, wrk_yt1, i0, in, j0, jn, 'IN2POS' )
*
      else
*
          call adw_exch_1 ( wrkx1, wrky1, wrkz1, wrkc1,xt1,wrk_yt1,zt1 )
*
          allocate(capx2(max(1,Adw_fro_a)),
     %             capy2(max(1,Adw_fro_a)),
     %             capz2(max(1,Adw_fro_a)),
     %             xpos2 (max(1,Adw_fro_a)),
     %             ypos2 (max(1,Adw_fro_a)),
     %             zpos2 (max(1,Adw_fro_a)),
     %             n2 (max(1,Adw_fro_a)) )
*
          call adw_exch_2 ( xpos2, ypos2, zpos2,
     %                  wrkx1, wrky1, wrkz1,
     %                  Adw_fro_n, Adw_fro_s, Adw_fro_a,
     %                  Adw_for_n, Adw_for_s, Adw_for_a, 3 )
*
      endif
*
*     ----------------------------------------------------------------------------------
*     Part 4 of SETTLS: Evaluate - dt/2 [ 2 V(r_d,t-dt)-V(r_d,t-2dt) ] in wrkz1 (W only)
*     ----------------------------------------------------------------------------------
*     1)  INPUT: F_w   =        [2*V(r,t-dt)-V(r,t-2dt)]
*     2) OUTPUT: wrkz1 = - dt/2 [2*V(r,t-dt)-V(r,t-2dt)] interpolated at r_d =  - dt/2 V_int
*     --------------------------------------------------------------------------------------
*
      Adw_hor_L = .true. 
      Adw_ver_L = .false. 
*
      call adw_trilin_turbo (wrkz1,F_w,-dth,xt1,wrk_yt1,zt1,capz1,
     %                       Adw_Fn_I,nijk,i0,in,j0,jn,l_nk)
*
      if (.not.G_lam) then
         if ( Adw_fro_a .gt. 0 ) then
*
              if ( Adw_ckbd_L ) call adw_ckbd ( ypos2 )
*
              call adw_setint ( n2, capx2, dummy, dummy, capy2, dummy,
     %                     dummy, capz2, dummy, xpos2, ypos2, zpos2,
     %                    .true., .true., .true., Adw_fro_a,1,Adw_fro_a,1,1,1)
*
              call adw_trilin ( xpos2, F_w, -dth, n2, capx2,capy2,capz2,
     %                     Adw_fro_a,1,Adw_fro_a,1,1,1)
*
         endif
*
         call adw_exch_2 ( wrkx1, dummy, dummy,
     %                  xpos2, dummy, dummy,
     %                  Adw_for_n, Adw_for_s, Adw_for_a,
     %                  Adw_fro_n, Adw_fro_s, Adw_fro_a, 1)
*
         if ( Adw_for_a .gt. 0 )
     %        call adw_exch_3 ( wrkz1, dummy, wrkx1, dummy, wrkc1, 1 )
*
         deallocate(capx2,capy2,capz2,xpos2,ypos2,zpos2,n2)
      endif
*
!$omp parallel private(n)
*
*     -------------------------------------------------------------------------------
*     Part 5 of SETTLS: Evaluate - dt V_d = - dt/2 * V_int  - dt/2 V(r,t-dt) (W only)
*     -------------------------------------------------------------------------------
*     1) INPUT : wrkz1 = - dt/2 [2*V(r_d,t-dt)-V(r_d,t-2dt)]
*     2) INPUT : psdth =           V(r  ,t-dt)
*     3) OUTPUT: wrkz1 = - dt/2 [2*V(r_d,t-dt)-V(r_d,t-2dt)] - dt/2 V(r,t-dt) = -dt V_d
*     -------------------------------------------------------------------------------------------
!$omp do
      do k=1,l_nk
      do j=1,l_nj
      do i=1,l_ni
         n = l_ni*l_nj*(k-1) + l_ni*(j-1) + i
         wrkz1(n) = wrkz1(n) - dth*psdth(i,j,k)
      enddo
      enddo
      enddo
!$omp enddo
*
c
c     ==================================================================
c     Compute new upstream position along zeta
c     ==================================================================
c
*     ---------------------------------------------
*     Part 6 of SETTLS: Evaluate z_d = [z - dt V_d]
*     ---------------------------------------------
*
!$omp do
      do j = j0,jn
      do i = i0,in
         n = ((j-1)*l_ni) + i   !for k=1
         zt1(n) = Geomg_z_8(1)
         n = (l_nk-1)*nij+((j-1)*l_ni) + i !for k=l_nk
         zt1(n) = Geomg_z_8(l_nk)
      enddo
      enddo
!$omp enddo
!$omp do
      do k = 2,l_nk-1
      do j = j0,jn
      do i = i0,in
         n = (k-1)*nij + ((j-1)*l_ni) + i
         zt1(n) = Geomg_z_8(k) + wrkz1(n)
         zt1(n) = min( pdm*Geomg_z_8(l_nk), 
     %                max( 1.0d0*zt1(n), pdp*Geomg_z_8(1) ) )
      enddo
      enddo
      enddo
!$omp enddo
*
!$omp end parallel
*
************************************************************************
      enddo ! end of iterations loop
************************************************************************
*
*     Store xt1,yt1,zt1 positions in F_u,F_v,F_w (used in adw_main_3_int)
*     -------------------------------------------------------------------
      do i=1,l_ni*l_nj*l_nk
         F_u(i) = xt1(i)
         F_v(i) = yt1(i)
         F_w(i) = zt1(i)
      enddo
*
*     Evaluate positions at mid-point for Crank-Nicholson procedure 
*     -------------------------------------------------------------
      call adw_traj_midpoint (xth, yth, xcth, ycth, zcth, xct1, yct1, zct1,
     %                        i0,in,j0,jn)
*
!$omp parallel private(n)
!$omp do
      do j = j0,jn
      do i = i0,in
         n = ((j-1)*l_ni) + i   !for k=1
         zth(n) = Geomg_z_8(1)
         n = (l_nk-1)*nij+((j-1)*l_ni) + i !for k=l_nk
         zth(n) = Geomg_z_8(l_nk)
      enddo
      enddo
!$omp enddo
!$omp do
      do k = 2,l_nk-1
         do j = j0,jn
         do i = i0,in
            n=(k-1)*nij+((j-1)*l_ni) + i
            zth(n) = half*(zt1(n) + Geomg_z_8(k))
*
            zth(n) = min( pdm*Geomg_z_8(l_nk),
     %               max( 1.0d0*zth(n), pdp*Geomg_z_8(1) ) )
*
         enddo
         enddo
      enddo
!$omp enddo
!$omp end parallel
*
      pnerr = vmmuld(-1,0)
*
      if (V4dg_conf.ne.0.and.Lctl_step.eq.Step_total) done_once_L = .true.
*
 1000 format(3X,'CALC UPSTREAM POSITIONS: (S/R ADW_MAIN_2_POS_SETTLS)')
      return
      end
