!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
***s/r adw_trajsp_RB - Ritchie/Beaudoin estimation of positions (MID-POINTS)
*                      (Based on adw_trajsp GEM3 and adx_trajsp_gccsa GEM4 of A.Qaddouri)
*
#include "model_macros_f.h"
*
      subroutine adw_trajsp_RB ( F_lon, F_lat, F_x, F_y, F_z,
     %                           F_u, F_v, F_dt,i0,in,j0,jn)
*
      implicit none
*
      real F_lon(*),F_lat(*),F_x(*),F_y(*),F_z(*),F_u(*),F_v(*),F_dt
      integer i0,in,j0,jn
*
*author Tanguay/Qaddouri
*
*revision
* v3_35 - Tanguay/Qaddouri  - initial MPI version
* v3_35 - Tanguay/Qaddouri  - Ritchie/Beaudoin estimation of positions
*
*object
*     see id section
*
*arguments
*______________________________________________________________________
*              |                                                 |     |
* NAME         | DESCRIPTION                                     | I/O |
*--------------|-------------------------------------------------|-----|
*              |                                                 |     |
* F_lon        | upwind longitudes at central time               |  o  |
* F_lat        | upwind latitudes at central time                |  o  |
* F_x          | upwind x cartesian positions at central time    |  o  |
* F_y          | upwind y cartesian positions at central time    |  o  |
* F_z          | upwind z cartesian positions at central time    |  o  |
* F_u          | real E-W wind components at upwind positions    |  i  |
* F_v          | real N-S wind components at upwind positions    |  i  |
* F_dt         | timestep lenght                                 |  i  |
*______________|_________________________________________________|_____|
*
*implicits
#include "glb_ld.cdk"
#include "adw.cdk"
#include "dcst.cdk"
#include "geomg.cdk"
************************************************************************
      integer n,ij,nij,i,j,k
*
      real*8  term_ord3_8,one_ov6_8,third_8,rad2deg_8,CLXXX_8
      real*8  xto_8,yto_8

      real*8  pdsa, pdca, pdcai, pdso, pdco, pdx, pdy, pdz,
     %        pdux, pduy, pduz, pdsinal, pdcosal, r2pi_8, two
      real*8  xcos((in-i0+1)*(jn-j0+1)), ycos((in-i0+1)*(jn-j0+1))
      real*8  xsin((in-i0+1)*(jn-j0+1)), ysin((in-i0+1)*(jn-j0+1))
      real*8  yrec((in-i0+1)*(jn-j0+1))
      real*8  xasin((in-i0+1)*(jn-j0+1)), yasin((in-i0+1)*(jn-j0+1))
      real*8  xatan((in-i0+1)*(jn-j0+1)), yatan((in-i0+1)*(jn-j0+1)), zatan((in-i0+1)*(jn-j0+1))
*
      parameter (two = 2.0)
      parameter( CLXXX_8 = 180.0 )
*
      logical done_L
      integer j_south,j_north,pole,p1,p2,j1,j2,loc
      data done_L /.false./
      save done_L
      common/info_trajsp_RB/j_south,j_north,p1,p2
*
************************************************************************
      nij  = l_ni*l_nj
*
      r2pi_8 = two * Dcst_pi_8
*
      third_8   = 1.0D0/3.0D0
      one_ov6_8 = 1.0D0/6.0D0
*
      rad2deg_8 = CLXXX_8/Dcst_pi_8
*
*     --------------------------------------------
*     LOCALISATION OF RITCHIE/BEAUDOIN restriction
*     --------------------------------------------
      if(.NOT.done_L) then

         j_north = j0-1
         do j=jn,j0,-1
            if (Geomg_y_8(j)*rad2deg_8.GT.80.) cycle
                j_north = j
                goto 1001
         enddo
 1001    continue

         j_south = jn+1 
         do j=j0,jn
            if (Geomg_y_8(j)*rad2deg_8.LT.-80.) cycle
                j_south = j
                goto 1002
         enddo
 1002    continue

         done_L = .TRUE.

         if (j_south.gt.j0) then
             p1 = 1
         else
             p1 = 2
         endif
         if (j_north.lt.jn) then
             p2 = 2
         else
             p2 = 1
         endif

      endif
*
!$omp parallel do private(ysin,ycos,yrec,xasin,xatan,yatan,
!$omp&  zatan,yasin,xsin,xcos,n,ij,pdx,pdy,pdz,pdsa,pdca,
!$omp&  pdcai,pdso,pdco,pdux,pduy,pduz,pdsinal,pdcosal,
!$omp&  term_ord3_8,xto_8,yto_8,pole,j1,j2,loc) 
!$omp&  shared(p1,p2,j_south,j_north)
*
      do k=1,l_nk

*        ---------------------------------------------------------
*        BETWEEN POLES
*        ---------------------------------------------------------
         do j=j_south,j_north
         do i=i0,in
 
            n = (k-1)*nij + ((j-1)*l_ni) + i

            term_ord3_8 = (F_u(n)*F_dt*Adw_tgy_8(j))**2 - (F_v(n)*F_dt)**2

            xto_8 = Adw_xa_8(i) - F_u(n)*F_dt*Adw_scy_8(j) * (1.0D0 + one_ov6_8 * term_ord3_8)

            if (xto_8 < 0.    ) xto_8 = xto_8 + r2pi_8

            if (xto_8 > r2pi_8) xto_8 = xto_8 - r2pi_8

            F_lon(n) = xto_8

            term_ord3_8 = third_8 * (F_u(n)*F_dt)**2 * (F_v(n)*F_dt)

            yto_8 = Adw_ya_8(j) - F_v(n)*F_dt + 0.50D0 * Adw_tgy_8(j) * (F_u(n)*F_dt)**2 - term_ord3_8

            F_lat(n) = yto_8

         enddo
         enddo

*        ---------------------------------------------------------
*        CLOSE TO POLES
*        ---------------------------------------------------------
         do pole = p1,p2  

            if (pole.eq.1) then
                j1 = j0 
                j2 = j_south -1 
            else
                j1 = j_north +1 
                j2 = jn 
            endif

            loc = 0

            do j=j1,j2
            do i=i0,in

               n = (k-1)*nij + ((j-1)*l_ni) + i

               loc = loc + 1 

               xcos(loc) = F_lat(n)
               xsin(loc) = sqrt( F_u(n) ** 2 + F_v(n) ** 2 ) * F_dt

            end do
            end do

            call vsin(ysin, xsin, (in-i0+1)*(j2-j1+1))
            call vcos(ycos, xcos, (in-i0+1)*(j2-j1+1))
            call vrec(yrec, ycos, (in-i0+1)*(j2-j1+1))

            loc = 0

            do j=j1,j2
            do i=i0,in

                n  = (k-1)*nij + ((j-1)*l_ni) + i
                ij = mod( n-1, nij ) + 1

                loc = loc + 1 
************************************************************************
* cartesian coordinates of grid points                                 *
************************************************************************
                pdx = Adw_cx2d_8(ij)
                pdy = Adw_sx2d_8(ij)
                pdz = Adw_sy2d_8(ij)
************************************************************************
* if very small wind set upwind point to grid point                    *
************************************************************************
                if ( abs(F_u(n))+abs(F_v(n)) .lt. 1.e-10 ) go to 99
*
                pdx = pdx * Adw_cy2d_8(ij)
                pdy = pdy * Adw_cy2d_8(ij)
************************************************************************
* sin and cosin of first guess of upwind positions                     *
************************************************************************
                pdsa  = F_z(n)
                pdca  = ycos(loc)
                pdcai = yrec(loc)
                pdso  = F_y(n) * pdcai
                pdco  = F_x(n) * pdcai
************************************************************************
* wind components in cartesian coordinate at upwind positions          *
************************************************************************
                pdux = ( - F_u(n) * pdso - F_v(n) * pdco * pdsa )
                pduy = (   F_u(n) * pdco - F_v(n) * pdso * pdsa )
                pduz =     F_v(n) * pdca
*
                pdsinal = pdx * pdux + pdy * pduy + pdz * pduz
                pdux = pdux - pdx * pdsinal
                pduy = pduy - pdy * pdsinal
                pduz = pduz - pdz * pdsinal
                pdcosal = sqrt( ( 1.0 + ysin(loc) ) * ( 1.0 - ysin(loc) ) )
                pdsinal = ysin(loc) /
     %                    sqrt( pdux * pdux + pduy * pduy + pduz * pduz )
*
                F_x(n) = pdcosal * pdx - pdsinal * pdux
                F_y(n) = pdcosal * pdy - pdsinal * pduy
                F_z(n) = pdcosal * pdz - pdsinal * pduz
   99           F_z(n) = min(1.0D0,max(1.0d0*F_z(n),-1.0D0))
*
                xasin(loc) = F_z(n)
                xatan(loc) = F_x(n)
                yatan(loc) = F_y(n)
*
            enddo
            enddo

            call vasin  ( yasin, xasin,        (in-i0+1)*(j2-j1+1) )
            call vatan2 ( zatan, yatan, xatan, (in-i0+1)*(j2-j1+1) )
*
            loc = 0
*
            do j=j1,j2
            do i=i0,in
*
               n = (k-1)*nij + ((j-1)*l_ni) + i

               loc = loc + 1 

               F_lat(n) = yasin(loc)
               F_lon(n) = zatan(loc) 
               if ( F_lon(n) .lt. 0.0 ) F_lon(n) = F_lon(n) + r2pi_8

            enddo
            enddo

         enddo

      enddo
!$omp end parallel do 

      return
      end
